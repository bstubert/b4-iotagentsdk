//********************************************************************************//
// MIT License                                                                    //
//                                                                                //
// Copyright (c) 2024 TeamViewer Germany GmbH                                     //
//                                                                                //
// Permission is hereby granted, free of charge, to any person obtaining a copy   //
// of this software and associated documentation files (the "Software"), to deal  //
// in the Software without restriction, including without limitation the rights   //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      //
// copies of the Software, and to permit persons to whom the Software is          //
// furnished to do so, subject to the following conditions:                       //
//                                                                                //
// The above copyright notice and this permission notice shall be included in all //
// copies or substantial portions of the Software.                                //
//                                                                                //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  //
// SOFTWARE.                                                                      //
//********************************************************************************//
// ==================================
// Generated by TVCMGen. DO NOT EDIT!
// ==================================
#pragma once

#include <TVRemoteScreenSDKCommunication/CommunicationLayerBase/CallStatus.h>
#include <TVRemoteScreenSDKCommunication/CommunicationLayerBase/IServiceServer.h>

#include <TVRemoteScreenSDKCommunication/ChatService/Chat.h>

#include <cstdint>
#include <functional>
#include <string>
#include <vector>

namespace TVRemoteScreenSDKCommunication
{

namespace ChatService
{

class IChatInServiceServer : public IServiceServer
{
public:
	virtual ~IChatInServiceServer() = default;

	// rpc call ObtainChats
	using ObtainChatsResponseCallback =
		std::function<void(const std::vector<ChatInfo>& chats, const CallStatus& callStatus)>;
	using ProcessObtainChatsRequestCallback = std::function<void(

		const std::string& comId,
		const ObtainChatsResponseCallback& response)>;
	virtual void SetObtainChatsCallback(const ProcessObtainChatsRequestCallback& requestProcessing) = 0;

	// rpc call SelectChat
	using SelectChatResponseCallback = std::function<void(

		const CallStatus& callStatus)>;
	using ProcessSelectChatRequestCallback = std::function<void(

		const std::string& comId,
		const std::string& chatId,
		const SelectChatResponseCallback& response)>;
	virtual void SetSelectChatCallback(const ProcessSelectChatRequestCallback& requestProcessing) = 0;

	// rpc call SendMessage
	using SendMessageResponseCallback = std::function<void(

		const CallStatus& callStatus)>;
	using ProcessSendMessageRequestCallback = std::function<void(

		const std::string& comId,
		uint32_t localId,
		const std::string& content,
		const SendMessageResponseCallback& response)>;
	virtual void SetSendMessageCallback(const ProcessSendMessageRequestCallback& requestProcessing) = 0;

	// rpc call LoadMessages
	using LoadMessagesResponseCallback = std::function<void(

		const CallStatus& callStatus)>;
	using ProcessLoadMessagesRequestCallback = std::function<void(

		const std::string& comId,
		uint32_t count,
		const std::string& lastId,
		const LoadMessagesResponseCallback& response)>;
	virtual void SetLoadMessagesCallback(const ProcessLoadMessagesRequestCallback& requestProcessing) = 0;

	// rpc call DeleteHistory
	using DeleteHistoryResponseCallback = std::function<void(

		const CallStatus& callStatus)>;
	using ProcessDeleteHistoryRequestCallback = std::function<void(

		const std::string& comId,
		const DeleteHistoryResponseCallback& response)>;
	virtual void SetDeleteHistoryCallback(const ProcessDeleteHistoryRequestCallback& requestProcessing) = 0;

	// rpc call DeleteChat
	using DeleteChatResponseCallback = std::function<void(

		const CallStatus& callStatus)>;
	using ProcessDeleteChatRequestCallback = std::function<void(

		const std::string& comId,
		const DeleteChatResponseCallback& response)>;
	virtual void SetDeleteChatCallback(const ProcessDeleteChatRequestCallback& requestProcessing) = 0;
};

} // namespace ChatService

} // namespace TVRemoteScreenSDKCommunication