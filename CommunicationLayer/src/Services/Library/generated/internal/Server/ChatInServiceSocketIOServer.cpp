//********************************************************************************//
// MIT License                                                                    //
//                                                                                //
// Copyright (c) 2024 TeamViewer Germany GmbH                                     //
//                                                                                //
// Permission is hereby granted, free of charge, to any person obtaining a copy   //
// of this software and associated documentation files (the "Software"), to deal  //
// in the Software without restriction, including without limitation the rights   //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      //
// copies of the Software, and to permit persons to whom the Software is          //
// furnished to do so, subject to the following conditions:                       //
//                                                                                //
// The above copyright notice and this permission notice shall be included in all //
// copies or substantial portions of the Software.                                //
//                                                                                //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  //
// SOFTWARE.                                                                      //
//********************************************************************************//
// ==================================
// Generated by TVCMGen. DO NOT EDIT!
// ==================================

#include "ChatInServiceSocketIOServer.h"

#include <TVRemoteScreenSDKCommunication/ServiceBase/RequestMetadata.h>
#include <TVRemoteScreenSDKCommunication/ServiceBase/ServiceErrorMessage.h>

#include "internal/ChatInServiceInFunctions.h"

#include "Chat.pb.h"
#include "ChatInMessages.pb.h"

namespace TVRemoteScreenSDKCommunication
{

namespace ChatService
{

bool ChatInServiceSocketIOServer::StartServer(const std::string& location)
{
	using namespace Transport::SocketIO;

	m_location = location;
	Server::ServerFunctionMap functions;
	{
		auto* requestProcessing = &m_ObtainChatsProcessing;
		functions[Function_ObtainChats] = [requestProcessing](const std::string& comIdValue,
											  std::shared_ptr<std::string> requestRaw,
											  std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvchatservice::ObtainChatsRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvchatservice::ObtainChatsResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus, &response](const std::vector<ChatInfo>& chatsInfos,
											  const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = TransportFW::Status::OK;

						for (const ChatInfo& chatInfo : chatsInfos)
						{
							::tvchatservice::ChatInfo* info = response.add_chatinfo();

							info->set_chatid(chatInfo.chatId);
							info->set_title(chatInfo.title);
							info->set_chattypeid(chatInfo.chatTypeId);

							const auto chatType = chatInfo.chatType;
							const auto chatState = chatInfo.chatState;

							::tvchatservice::ChatType chatTypeProtoValue = ::tvchatservice::ChatType::Machine;
							bool chatTypeConverted = true;
							switch (chatType)
							{
								case ChatType::Machine:
									chatTypeProtoValue = ::tvchatservice::ChatType::Machine;
									break;
								case ChatType::Session:
									chatTypeProtoValue = ::tvchatservice::ChatType::Session;
									break;
								default:
									chatTypeConverted = false;
									break;
							}

							::tvchatservice::ChatState chatStateProtoValue = ::tvchatservice::ChatState::Open;
							bool chatStateConverted = true;
							switch (chatState)
							{
								case ChatState::Open:
									chatStateProtoValue = ::tvchatservice::ChatState::Open;
									break;
								case ChatState::Closed:
									chatStateProtoValue = ::tvchatservice::ChatState::Closed;
									break;
								default:
									chatStateConverted = false;
									break;
							}

							if (!chatTypeConverted || !chatStateConverted)
							{
								returnStatus = TransportFW::Status{TransportFW::StatusCode::CANCELLED,
									TvServiceBase::ErrorMessage_UnexpectedEnumValue};
							}
							info->set_chattype(chatTypeProtoValue);
							info->set_chatstate(chatStateProtoValue);
						}
					}
					else
					{
						returnStatus = TransportFW::Status{TransportFW::StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_obtainChatsProcessing = *requestProcessing;

				m_obtainChatsProcessing(comId, responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_SelectChatProcessing;
		functions[Function_SelectChat] = [requestProcessing](const std::string& comIdValue,
											 std::shared_ptr<std::string> requestRaw,
											 std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvchatservice::SelectChatRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvchatservice::SelectChatResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_selectChatProcessing = *requestProcessing;

				m_selectChatProcessing(comId,
					request.chatid(),

					responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_SendMessageProcessing;
		functions[Function_SendMessage] = [requestProcessing](const std::string& comIdValue,
											  std::shared_ptr<std::string> requestRaw,
											  std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvchatservice::SendMessageRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvchatservice::SendMessageResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_sendMessageProcessing = *requestProcessing;

				m_sendMessageProcessing(comId,
					request.localid(),

					request.content(),

					responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_LoadMessagesProcessing;
		functions[Function_LoadMessages] = [requestProcessing](const std::string& comIdValue,
											   std::shared_ptr<std::string> requestRaw,
											   std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvchatservice::LoadMessagesRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvchatservice::LoadMessagesResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_loadMessagesProcessing = *requestProcessing;

				m_loadMessagesProcessing(comId,
					request.count(),

					request.lastid(),

					responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_DeleteHistoryProcessing;
		functions[Function_DeleteHistory] = [requestProcessing](const std::string& comIdValue,
												std::shared_ptr<std::string> requestRaw,
												std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvchatservice::DeleteHistoryRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvchatservice::DeleteHistoryResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_deleteHistoryProcessing = *requestProcessing;

				m_deleteHistoryProcessing(comId, responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_DeleteChatProcessing;
		functions[Function_DeleteChat] = [requestProcessing](const std::string& comIdValue,
											 std::shared_ptr<std::string> requestRaw,
											 std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvchatservice::DeleteChatRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvchatservice::DeleteChatResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_deleteChatProcessing = *requestProcessing;

				m_deleteChatProcessing(comId, responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	m_server.reset(new Server(std::move(functions)));

	return m_server->Start(location);
}

void ChatInServiceSocketIOServer::StopServer(bool /*force*/)
{
	if (m_server)
	{
		m_server->Shutdown();
	}
	m_server.reset();
}

ServiceType ChatInServiceSocketIOServer::GetServiceType() const
{
	return ServiceType::ChatIn;
}

const std::string& ChatInServiceSocketIOServer::GetLocation() const
{
	return m_location;
}

void ChatInServiceSocketIOServer::SetObtainChatsCallback(const ProcessObtainChatsRequestCallback& requestProcessing)
{
	m_ObtainChatsProcessing = requestProcessing;
}

void ChatInServiceSocketIOServer::SetSelectChatCallback(const ProcessSelectChatRequestCallback& requestProcessing)
{
	m_SelectChatProcessing = requestProcessing;
}

void ChatInServiceSocketIOServer::SetSendMessageCallback(const ProcessSendMessageRequestCallback& requestProcessing)
{
	m_SendMessageProcessing = requestProcessing;
}

void ChatInServiceSocketIOServer::SetLoadMessagesCallback(const ProcessLoadMessagesRequestCallback& requestProcessing)
{
	m_LoadMessagesProcessing = requestProcessing;
}

void ChatInServiceSocketIOServer::SetDeleteHistoryCallback(const ProcessDeleteHistoryRequestCallback& requestProcessing)
{
	m_DeleteHistoryProcessing = requestProcessing;
}

void ChatInServiceSocketIOServer::SetDeleteChatCallback(const ProcessDeleteChatRequestCallback& requestProcessing)
{
	m_DeleteChatProcessing = requestProcessing;
}

} // namespace ChatService

} // namespace TVRemoteScreenSDKCommunication