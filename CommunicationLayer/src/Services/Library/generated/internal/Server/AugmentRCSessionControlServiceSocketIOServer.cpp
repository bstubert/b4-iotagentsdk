//********************************************************************************//
// MIT License                                                                    //
//                                                                                //
// Copyright (c) 2024 TeamViewer Germany GmbH                                     //
//                                                                                //
// Permission is hereby granted, free of charge, to any person obtaining a copy   //
// of this software and associated documentation files (the "Software"), to deal  //
// in the Software without restriction, including without limitation the rights   //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      //
// copies of the Software, and to permit persons to whom the Software is          //
// furnished to do so, subject to the following conditions:                       //
//                                                                                //
// The above copyright notice and this permission notice shall be included in all //
// copies or substantial portions of the Software.                                //
//                                                                                //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  //
// SOFTWARE.                                                                      //
//********************************************************************************//
// ==================================
// Generated by TVCMGen. DO NOT EDIT!
// ==================================

#include "AugmentRCSessionControlServiceSocketIOServer.h"

#include <TVRemoteScreenSDKCommunication/ServiceBase/RequestMetadata.h>
#include <TVRemoteScreenSDKCommunication/ServiceBase/ServiceErrorMessage.h>

#include "internal/AugmentRCSessionControlServiceControlFunctions.h"

#include "AugmentRCSession.pb.h"
#include "AugmentRCSessionControlMessages.pb.h"

namespace TVRemoteScreenSDKCommunication
{

namespace AugmentRCSessionService
{

bool AugmentRCSessionControlServiceSocketIOServer::StartServer(const std::string& location)
{
	using namespace Transport::SocketIO;

	m_location = location;
	Server::ServerFunctionMap functions;
	{
		auto* requestProcessing = &m_StartListeningProcessing;
		functions[Function_StartListening] = [requestProcessing](const std::string& comIdValue,
												 std::shared_ptr<std::string> requestRaw,
												 std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvaugmentrcsessionservice::StartListeningRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvaugmentrcsessionservice::StartListeningResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_startListeningProcessing = *requestProcessing;

				m_startListeningProcessing(comId, responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_StopListeningProcessing;
		functions[Function_StopListening] = [requestProcessing](const std::string& comIdValue,
												std::shared_ptr<std::string> requestRaw,
												std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvaugmentrcsessionservice::StopListeningRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvaugmentrcsessionservice::StopListeningResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_stopListeningProcessing = *requestProcessing;

				m_stopListeningProcessing(comId, responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_CancelReceivedInvitationProcessing;
		functions[Function_CancelReceivedInvitation] = [requestProcessing](const std::string& comIdValue,
														   std::shared_ptr<std::string> requestRaw,
														   std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvaugmentrcsessionservice::CancelReceivedInvitationRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvaugmentrcsessionservice::CancelReceivedInvitationResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_cancelReceivedInvitationProcessing = *requestProcessing;

				const auto cancellationReason = request.cancellationreason();

				CancellationReason cancellationReasonEnumValue = CancellationReason::Invalid;

				switch (cancellationReason)
				{
					case ::tvaugmentrcsessionservice::CancellationReason::Invalid:
						cancellationReasonEnumValue = CancellationReason::Invalid;
						break;
					case ::tvaugmentrcsessionservice::CancellationReason::ClosedDialog:
						cancellationReasonEnumValue = CancellationReason::ClosedDialog;
						break;
					case ::tvaugmentrcsessionservice::CancellationReason::PressedCancelButton:
						cancellationReasonEnumValue = CancellationReason::PressedCancelButton;
						break;
					default:

						break;
				}

				m_cancelReceivedInvitationProcessing(comId,
					cancellationReasonEnumValue,

					responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	m_server.reset(new Server(std::move(functions)));

	return m_server->Start(location);
}

void AugmentRCSessionControlServiceSocketIOServer::StopServer(bool /*force*/)
{
	if (m_server)
	{
		m_server->Shutdown();
	}
	m_server.reset();
}

ServiceType AugmentRCSessionControlServiceSocketIOServer::GetServiceType() const
{
	return ServiceType::AugmentRCSessionControl;
}

const std::string& AugmentRCSessionControlServiceSocketIOServer::GetLocation() const
{
	return m_location;
}

void AugmentRCSessionControlServiceSocketIOServer::SetStartListeningCallback(
	const ProcessStartListeningRequestCallback& requestProcessing)
{
	m_StartListeningProcessing = requestProcessing;
}

void AugmentRCSessionControlServiceSocketIOServer::SetStopListeningCallback(const ProcessStopListeningRequestCallback& requestProcessing)
{
	m_StopListeningProcessing = requestProcessing;
}

void AugmentRCSessionControlServiceSocketIOServer::SetCancelReceivedInvitationCallback(
	const ProcessCancelReceivedInvitationRequestCallback& requestProcessing)
{
	m_CancelReceivedInvitationProcessing = requestProcessing;
}

} // namespace AugmentRCSessionService

} // namespace TVRemoteScreenSDKCommunication