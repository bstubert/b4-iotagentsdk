//********************************************************************************//
// MIT License                                                                    //
//                                                                                //
// Copyright (c) 2024 TeamViewer Germany GmbH                                     //
//                                                                                //
// Permission is hereby granted, free of charge, to any person obtaining a copy   //
// of this software and associated documentation files (the "Software"), to deal  //
// in the Software without restriction, including without limitation the rights   //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      //
// copies of the Software, and to permit persons to whom the Software is          //
// furnished to do so, subject to the following conditions:                       //
//                                                                                //
// The above copyright notice and this permission notice shall be included in all //
// copies or substantial portions of the Software.                                //
//                                                                                //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  //
// SOFTWARE.                                                                      //
//********************************************************************************//
// ==================================
// Generated by TVCMGen. DO NOT EDIT!
// ==================================

#include "InputServiceSocketIOServer.h"

#include <TVRemoteScreenSDKCommunication/ServiceBase/RequestMetadata.h>
#include <TVRemoteScreenSDKCommunication/ServiceBase/ServiceErrorMessage.h>

#include "internal/InputServiceFunctions.h"

#include "KeyRequest.pb.h"
#include "KeyResponse.pb.h"
#include "MouseButton.pb.h"
#include "MouseMoveRequest.pb.h"
#include "MouseMoveResponse.pb.h"
#include "MousePressReleaseRequest.pb.h"
#include "MousePressReleaseResponse.pb.h"
#include "MouseWheelRequest.pb.h"
#include "MouseWheelResponse.pb.h"

namespace TVRemoteScreenSDKCommunication
{

namespace InputService
{

bool InputServiceSocketIOServer::StartServer(const std::string& location)
{
	using namespace Transport::SocketIO;

	m_location = location;
	Server::ServerFunctionMap functions;
	{
		auto* requestProcessing = &m_SimulateKeyProcessing;
		functions[Function_SimulateKey] = [requestProcessing](const std::string& comIdValue,
											  std::shared_ptr<std::string> requestRaw,
											  std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvinputservice::KeyRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvinputservice::KeyResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_simulateKeyProcessing = *requestProcessing;

				const auto keystate = request.keystate();

				KeyState keystateEnumValue = KeyState::Up;
				bool keystateConverted = true;
				switch (keystate)
				{
					case ::tvinputservice::KeyRequest_KeyState_Unknown:
						keystateEnumValue = KeyState::Unknown;
						break;
					case ::tvinputservice::KeyRequest_KeyState_Down:
						keystateEnumValue = KeyState::Down;
						break;
					case ::tvinputservice::KeyRequest_KeyState_Up:
						keystateEnumValue = KeyState::Up;
						break;
					default:
						keystateConverted = false;
						break;
				}

				if (!keystateConverted)
				{
					return TransportFW::Status{TransportFW::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_UnexpectedEnumValue};
				}

				m_simulateKeyProcessing(comId,
					keystateEnumValue,

					request.xkbsymbol(),

					request.unicodecharacter(),

					request.xkbmodifiers(),

					responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_SimulateMouseMoveProcessing;
		functions[Function_SimulateMouseMove] = [requestProcessing](const std::string& comIdValue,
													std::shared_ptr<std::string> requestRaw,
													std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvinputservice::MouseMoveRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvinputservice::MouseMoveResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_simulateMouseMoveProcessing = *requestProcessing;

				m_simulateMouseMoveProcessing(comId,
					request.posx(),

					request.posy(),

					responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_SimulateMousePressReleaseProcessing;
		functions[Function_SimulateMousePressRelease] = [requestProcessing](const std::string& comIdValue,
															std::shared_ptr<std::string> requestRaw,
															std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvinputservice::MousePressReleaseRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvinputservice::MousePressReleaseResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_simulateMousePressReleaseProcessing = *requestProcessing;

				const auto mouseButtonState = request.mousebuttonstate();

				MouseButtonState mouseButtonStateEnumValue = MouseButtonState::Released;

				switch (mouseButtonState)
				{
					case ::tvinputservice::MousePressReleaseRequest_MouseButtonState_Unknown:
						mouseButtonStateEnumValue = MouseButtonState::Unknown;
						break;
					case ::tvinputservice::MousePressReleaseRequest_MouseButtonState_Pressed:
						mouseButtonStateEnumValue = MouseButtonState::Pressed;
						break;
					case ::tvinputservice::MousePressReleaseRequest_MouseButtonState_Released:
						mouseButtonStateEnumValue = MouseButtonState::Released;
						break;
					default:

						break;
				}

				const auto button = request.button();

				MouseButton buttonEnumValue = MouseButton::Unknown;

				switch (button)
				{
					case ::tvinputservice::MouseButton::Unknown:
						buttonEnumValue = MouseButton::Unknown;
						break;
					case ::tvinputservice::MouseButton::Left:
						buttonEnumValue = MouseButton::Left;
						break;
					case ::tvinputservice::MouseButton::Middle:
						buttonEnumValue = MouseButton::Middle;
						break;
					case ::tvinputservice::MouseButton::Right:
						buttonEnumValue = MouseButton::Right;
						break;
					default:

						break;
				}

				m_simulateMousePressReleaseProcessing(comId,
					mouseButtonStateEnumValue,

					request.posx(),

					request.posy(),

					buttonEnumValue,

					responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_SimulateMouseWheelProcessing;
		functions[Function_SimulateMouseWheel] = [requestProcessing](const std::string& comIdValue,
													 std::shared_ptr<std::string> requestRaw,
													 std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvinputservice::MouseWheelRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvinputservice::MouseWheelResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_simulateMouseWheelProcessing = *requestProcessing;

				m_simulateMouseWheelProcessing(comId,
					request.posx(),

					request.posy(),

					request.angle(),

					responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	m_server.reset(new Server(std::move(functions)));

	return m_server->Start(location);
}

void InputServiceSocketIOServer::StopServer(bool /*force*/)
{
	if (m_server)
	{
		m_server->Shutdown();
	}
	m_server.reset();
}

ServiceType InputServiceSocketIOServer::GetServiceType() const
{
	return ServiceType::Input;
}

const std::string& InputServiceSocketIOServer::GetLocation() const
{
	return m_location;
}

void InputServiceSocketIOServer::SetSimulateKeyCallback(const ProcessSimulateKeyRequestCallback& requestProcessing)
{
	m_SimulateKeyProcessing = requestProcessing;
}

void InputServiceSocketIOServer::SetSimulateMouseMoveCallback(const ProcessSimulateMouseMoveRequestCallback& requestProcessing)
{
	m_SimulateMouseMoveProcessing = requestProcessing;
}

void InputServiceSocketIOServer::SetSimulateMousePressReleaseCallback(
	const ProcessSimulateMousePressReleaseRequestCallback& requestProcessing)
{
	m_SimulateMousePressReleaseProcessing = requestProcessing;
}

void InputServiceSocketIOServer::SetSimulateMouseWheelCallback(const ProcessSimulateMouseWheelRequestCallback& requestProcessing)
{
	m_SimulateMouseWheelProcessing = requestProcessing;
}

} // namespace InputService

} // namespace TVRemoteScreenSDKCommunication