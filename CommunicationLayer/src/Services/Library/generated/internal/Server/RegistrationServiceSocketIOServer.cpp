//********************************************************************************//
// MIT License                                                                    //
//                                                                                //
// Copyright (c) 2024 TeamViewer Germany GmbH                                     //
//                                                                                //
// Permission is hereby granted, free of charge, to any person obtaining a copy   //
// of this software and associated documentation files (the "Software"), to deal  //
// in the Software without restriction, including without limitation the rights   //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      //
// copies of the Software, and to permit persons to whom the Software is          //
// furnished to do so, subject to the following conditions:                       //
//                                                                                //
// The above copyright notice and this permission notice shall be included in all //
// copies or substantial portions of the Software.                                //
//                                                                                //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  //
// SOFTWARE.                                                                      //
//********************************************************************************//
// ==================================
// Generated by TVCMGen. DO NOT EDIT!
// ==================================

#include "RegistrationServiceSocketIOServer.h"

#include <TVRemoteScreenSDKCommunication/ServiceBase/RequestMetadata.h>
#include <TVRemoteScreenSDKCommunication/ServiceBase/ServiceErrorMessage.h>

#include "internal/RegistrationServiceFunctions.h"

#include "DiscoverRequest.pb.h"
#include "DiscoverResponse.pb.h"
#include "ExchangeVersionRequest.pb.h"
#include "ExchangeVersionResponse.pb.h"
#include "RegisterRequest.pb.h"
#include "RegisterResponse.pb.h"
#include "ServiceType.pb.h"

namespace TVRemoteScreenSDKCommunication
{

namespace RegistrationService
{

bool RegistrationServiceSocketIOServer::StartServer(const std::string& location)
{
	using namespace Transport::SocketIO;

	m_location = location;
	Server::ServerFunctionMap functions;
	{
		auto* requestProcessing = &m_ExchangeVersionProcessing;
		functions[Function_ExchangeVersion] = [requestProcessing](const std::string& comIdValue,
												  std::shared_ptr<std::string> requestRaw,
												  std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvregistrationservice::ExchangeVersionRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvregistrationservice::ExchangeVersionResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;
				(void)comId;

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus, &response](const std::string& ownVersionNumber, const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						response.set_version(ownVersionNumber);
						returnStatus = TransportFW::Status::OK;
					}
					else
					{
						returnStatus = TransportFW::Status{TransportFW::StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_exchangeVersionProcessing = *requestProcessing;

				m_exchangeVersionProcessing(request.version(), responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_DiscoverProcessing;
		functions[Function_Discover] = [requestProcessing](const std::string& comIdValue,
										   std::shared_ptr<std::string> requestRaw,
										   std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvregistrationservice::DiscoverRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvregistrationservice::DiscoverResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;
				(void)comId;

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus, &response](const std::string& communicationId,
											  const std::vector<ServiceInformation>& services,
											  const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						response.set_communicationid(communicationId);
						for (const ServiceInformation& serviceInfo : services)
						{
							::tvregistrationservice::ServiceInformation* info = response.add_serviceinfo();
							const auto serviceType = serviceInfo.type;

							::tvregistrationservice::ServiceType serviceTypeProtoValue =
								::tvregistrationservice::ServiceType::Unknown;

							switch (serviceType)
							{
								case ServiceType::Unknown:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::Unknown;
									break;
								case ServiceType::Registration:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::Registration;
									break;
								case ServiceType::Connectivity:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::Connectivity;
									break;
								case ServiceType::Image:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::Image;
									break;
								case ServiceType::Input:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::Input;
									break;
								case ServiceType::SessionControl:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::SessionControl;
									break;
								case ServiceType::SessionStatus:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::SessionStatus;
									break;
								case ServiceType::ImageNotification:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::ImageNotification;
									break;
								case ServiceType::AccessControlIn:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::AccessControlIn;
									break;
								case ServiceType::AccessControlOut:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::AccessControlOut;
									break;
								case ServiceType::InstantSupport:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::InstantSupport;
									break;
								case ServiceType::ViewGeometry:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::ViewGeometry;
									break;
								case ServiceType::InstantSupportNotification:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::InstantSupportNotification;
									break;
								case ServiceType::ChatIn:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::ChatIn;
									break;
								case ServiceType::ChatOut:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::ChatOut;
									break;
								case ServiceType::ConnectionConfirmationRequest:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::ConnectionConfirmationRequest;
									break;
								case ServiceType::ConnectionConfirmationResponse:
									serviceTypeProtoValue = ::tvregistrationservice::ServiceType::ConnectionConfirmationResponse;
									break;
								default:

									break;
							}

							info->set_type(serviceTypeProtoValue);
							info->set_location(serviceInfo.location);
						}
						returnStatus = TransportFW::Status::OK;
					}
					else
					{
						returnStatus = TransportFW::Status{TransportFW::StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_discoverProcessing = *requestProcessing;

				m_discoverProcessing(request.communicationversion(), responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	{
		auto* requestProcessing = &m_RegisterProcessing;
		functions[Function_Register] = [requestProcessing](const std::string& comIdValue,
										   std::shared_ptr<std::string> requestRaw,
										   std::shared_ptr<std::string> responseRaw)
		{
			if (!*requestProcessing)
			{
				return Status{StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback};
			}
			::tvregistrationservice::RegisterRequest request;
			if (!request.ParseFromString(*requestRaw))
			{
				return Status(StatusCode::IO_ERROR, "error parsing request");
			}

			requestRaw->clear();

			::tvregistrationservice::RegisterResponse response;

			Status status = [&]()
			{
				std::string comId = comIdValue;

				if (comIdValue.empty())
				{
					return Status{StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId};
				}

				Status returnStatus{StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled};

				auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
				{
					if (callStatus.IsOk())
					{
						returnStatus = Status::OK;
					}
					else
					{
						returnStatus = Status{StatusCode::ABORTED, callStatus.errorMessage};
					}
				};

				auto& m_registerProcessing = *requestProcessing;

				const auto type = request.type();

				ServiceType typeEnumValue = ServiceType::Unknown;

				switch (type)
				{
					case ::tvregistrationservice::ServiceType::Unknown:
						typeEnumValue = ServiceType::Unknown;
						break;
					case ::tvregistrationservice::ServiceType::Registration:
						typeEnumValue = ServiceType::Registration;
						break;
					case ::tvregistrationservice::ServiceType::Connectivity:
						typeEnumValue = ServiceType::Connectivity;
						break;
					case ::tvregistrationservice::ServiceType::Image:
						typeEnumValue = ServiceType::Image;
						break;
					case ::tvregistrationservice::ServiceType::Input:
						typeEnumValue = ServiceType::Input;
						break;
					case ::tvregistrationservice::ServiceType::SessionControl:
						typeEnumValue = ServiceType::SessionControl;
						break;
					case ::tvregistrationservice::ServiceType::SessionStatus:
						typeEnumValue = ServiceType::SessionStatus;
						break;
					case ::tvregistrationservice::ServiceType::ImageNotification:
						typeEnumValue = ServiceType::ImageNotification;
						break;
					case ::tvregistrationservice::ServiceType::AccessControlIn:
						typeEnumValue = ServiceType::AccessControlIn;
						break;
					case ::tvregistrationservice::ServiceType::AccessControlOut:
						typeEnumValue = ServiceType::AccessControlOut;
						break;
					case ::tvregistrationservice::ServiceType::InstantSupport:
						typeEnumValue = ServiceType::InstantSupport;
						break;
					case ::tvregistrationservice::ServiceType::ViewGeometry:
						typeEnumValue = ServiceType::ViewGeometry;
						break;
					case ::tvregistrationservice::ServiceType::InstantSupportNotification:
						typeEnumValue = ServiceType::InstantSupportNotification;
						break;
					case ::tvregistrationservice::ServiceType::ChatIn:
						typeEnumValue = ServiceType::ChatIn;
						break;
					case ::tvregistrationservice::ServiceType::ChatOut:
						typeEnumValue = ServiceType::ChatOut;
						break;
					case ::tvregistrationservice::ServiceType::ConnectionConfirmationRequest:
						typeEnumValue = ServiceType::ConnectionConfirmationRequest;
						break;
					case ::tvregistrationservice::ServiceType::ConnectionConfirmationResponse:
						typeEnumValue = ServiceType::ConnectionConfirmationResponse;
						break;
					default:

						break;
				}

				m_registerProcessing(comId,
					typeEnumValue,

					request.location(),

					responseProcessing);

				return returnStatus;
			}();
			if (!status.ok())
			{
				return status;
			}

			if (!response.SerializeToString(responseRaw.get()))
			{
				return Status(StatusCode::IO_ERROR, "response serialization failed");
			}

			return status;
		};
	}

	m_server.reset(new Server(std::move(functions)));

	return m_server->Start(location);
}

void RegistrationServiceSocketIOServer::StopServer(bool /*force*/)
{
	if (m_server)
	{
		m_server->Shutdown();
	}
	m_server.reset();
}

ServiceType RegistrationServiceSocketIOServer::GetServiceType() const
{
	return ServiceType::Registration;
}

const std::string& RegistrationServiceSocketIOServer::GetLocation() const
{
	return m_location;
}

void RegistrationServiceSocketIOServer::SetExchangeVersionCallback(const ProcessExchangeVersionRequestCallback& requestProcessing)
{
	m_ExchangeVersionProcessing = requestProcessing;
}

void RegistrationServiceSocketIOServer::SetDiscoverCallback(const ProcessDiscoverRequestCallback& requestProcessing)
{
	m_DiscoverProcessing = requestProcessing;
}

void RegistrationServiceSocketIOServer::SetRegisterCallback(const ProcessRegisterRequestCallback& requestProcessing)
{
	m_RegisterProcessing = requestProcessing;
}

} // namespace RegistrationService

} // namespace TVRemoteScreenSDKCommunication