//********************************************************************************//
// MIT License                                                                    //
//                                                                                //
// Copyright (c) 2024 TeamViewer Germany GmbH                                     //
//                                                                                //
// Permission is hereby granted, free of charge, to any person obtaining a copy   //
// of this software and associated documentation files (the "Software"), to deal  //
// in the Software without restriction, including without limitation the rights   //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      //
// copies of the Software, and to permit persons to whom the Software is          //
// furnished to do so, subject to the following conditions:                       //
//                                                                                //
// The above copyright notice and this permission notice shall be included in all //
// copies or substantial portions of the Software.                                //
//                                                                                //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  //
// SOFTWARE.                                                                      //
//********************************************************************************//
// ==================================
// Generated by TVCMGen. DO NOT EDIT!
// ==================================

#include "ChatOutServicegRPCServer.h"

#include <TVRemoteScreenSDKCommunication/ServiceBase/RequestMetadata.h>
#include <TVRemoteScreenSDKCommunication/ServiceBase/ServiceErrorMessage.h>

#include <grpc++/grpc++.h>

namespace TVRemoteScreenSDKCommunication
{

namespace ChatService
{

bool ChatOutServicegRPCServer::StartServer(const std::string& location)
{
	m_location = location;

	m_server = TransportFW::CreateAndStartSyncServer(m_location,
		this); // Register this "service" as the instance through which we'll communicate with clients.

	return m_server != nullptr;
}

void ChatOutServicegRPCServer::StopServer(bool /*force*/)
{
	if (m_server)
	{
		m_server->Shutdown();
	}
	m_server.reset();
}

ServiceType ChatOutServicegRPCServer::GetServiceType() const
{
	return ServiceType::ChatOut;
}

const std::string& ChatOutServicegRPCServer::GetLocation() const
{
	return m_location;
}

void ChatOutServicegRPCServer::SetChatCreatedCallback(const ProcessChatCreatedRequestCallback& requestProcessing)
{
	m_chatCreatedProcessing = requestProcessing;
}

void ChatOutServicegRPCServer::SetChatsRemovedCallback(const ProcessChatsRemovedRequestCallback& requestProcessing)
{
	m_chatsRemovedProcessing = requestProcessing;
}

void ChatOutServicegRPCServer::SetReceivedMessagesCallback(const ProcessReceivedMessagesRequestCallback& requestProcessing)
{
	m_receivedMessagesProcessing = requestProcessing;
}

void ChatOutServicegRPCServer::SetMessageSentCallback(const ProcessMessageSentRequestCallback& requestProcessing)
{
	m_messageSentProcessing = requestProcessing;
}

void ChatOutServicegRPCServer::SetMessageNotSentCallback(const ProcessMessageNotSentRequestCallback& requestProcessing)
{
	m_messageNotSentProcessing = requestProcessing;
}

void ChatOutServicegRPCServer::SetLoadedMessagesCallback(const ProcessLoadedMessagesRequestCallback& requestProcessing)
{
	m_loadedMessagesProcessing = requestProcessing;
}

void ChatOutServicegRPCServer::SetDeletedHistoryCallback(const ProcessDeletedHistoryRequestCallback& requestProcessing)
{
	m_deletedHistoryProcessing = requestProcessing;
}

void ChatOutServicegRPCServer::SetClosedChatCallback(const ProcessClosedChatRequestCallback& requestProcessing)
{
	m_closedChatProcessing = requestProcessing;
}

::grpc::Status ChatOutServicegRPCServer::ChatCreated(::grpc::ServerContext* context,
	const ::tvchatservice::ChatCreatedRequest* requestPtr,
	::tvchatservice::ChatCreatedResponse* responsePtr)
{
	if (context == nullptr || requestPtr == nullptr || responsePtr == nullptr)
	{
		return ::grpc::Status(::grpc::StatusCode::INTERNAL, std::string{});
	}

	if (!m_chatCreatedProcessing)
	{
		return ::grpc::Status(::grpc::StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback);
	}
	auto& request = *requestPtr;
	(void)request;

	auto& response = *responsePtr;
	(void)response;

	std::string comId;

	const auto foundComId = context->client_metadata().find(ServiceBase::CommunicationIdToken);
	if (foundComId == context->client_metadata().end())
	{
		return ::grpc::Status(::grpc::StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId);
	}
	comId = std::string((foundComId->second).data(), (foundComId->second).length());

	::grpc::Status returnStatus =
		::grpc::Status(::grpc::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled);

	auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
	{
		if (callStatus.IsOk())
		{
			returnStatus = ::grpc::Status::OK;
		}
		else
		{
			returnStatus = ::grpc::Status(::grpc::StatusCode::ABORTED, callStatus.errorMessage);
		}
	};

	const auto chatType = request.chattype();

	ChatType chatTypeEnumValue = ChatType::Machine;
	bool chatTypeConverted = true;
	switch (chatType)
	{
		case ::tvchatservice::ChatType::Machine:
			chatTypeEnumValue = ChatType::Machine;
			break;
		case ::tvchatservice::ChatType::Session:
			chatTypeEnumValue = ChatType::Session;
			break;
		default:
			chatTypeConverted = false;
			break;
	}

	if (!chatTypeConverted)
	{
		return TransportFW::Status{TransportFW::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_UnexpectedEnumValue};
	}

	m_chatCreatedProcessing(comId,
		request.chatid(),

		request.title(),

		chatTypeEnumValue,

		request.chattypeid(),

		responseProcessing);

	return returnStatus;
}

::grpc::Status ChatOutServicegRPCServer::ChatsRemoved(::grpc::ServerContext* context,
	const ::tvchatservice::ChatsRemovedRequest* requestPtr,
	::tvchatservice::ChatsRemovedResponse* responsePtr)
{
	if (context == nullptr || requestPtr == nullptr || responsePtr == nullptr)
	{
		return ::grpc::Status(::grpc::StatusCode::INTERNAL, std::string{});
	}

	if (!m_chatsRemovedProcessing)
	{
		return ::grpc::Status(::grpc::StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback);
	}
	auto& request = *requestPtr;
	(void)request;

	auto& response = *responsePtr;
	(void)response;

	std::string comId;

	const auto foundComId = context->client_metadata().find(ServiceBase::CommunicationIdToken);
	if (foundComId == context->client_metadata().end())
	{
		return ::grpc::Status(::grpc::StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId);
	}
	comId = std::string((foundComId->second).data(), (foundComId->second).length());

	::grpc::Status returnStatus =
		::grpc::Status(::grpc::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled);

	auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
	{
		if (callStatus.IsOk())
		{
			returnStatus = ::grpc::Status::OK;
		}
		else
		{
			returnStatus = ::grpc::Status(::grpc::StatusCode::ABORTED, callStatus.errorMessage);
		}
	};

	std::vector<std::string> chatIdRepeated(request.chatid_size());
	for (int index = 0; index < request.chatid_size(); ++index)
	{
		chatIdRepeated[index] = request.chatid(index);
	}

	m_chatsRemovedProcessing(comId,
		chatIdRepeated,

		responseProcessing);

	return returnStatus;
}

::grpc::Status ChatOutServicegRPCServer::ReceivedMessages(::grpc::ServerContext* context,
	const ::tvchatservice::ReceivedMessagesRequest* requestPtr,
	::tvchatservice::ReceivedMessagesResponse* responsePtr)
{
	if (context == nullptr || requestPtr == nullptr || responsePtr == nullptr)
	{
		return ::grpc::Status(::grpc::StatusCode::INTERNAL, std::string{});
	}

	if (!m_receivedMessagesProcessing)
	{
		return ::grpc::Status(::grpc::StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback);
	}
	auto& request = *requestPtr;
	(void)request;

	auto& response = *responsePtr;
	(void)response;

	std::string comId;

	const auto foundComId = context->client_metadata().find(ServiceBase::CommunicationIdToken);
	if (foundComId == context->client_metadata().end())
	{
		return ::grpc::Status(::grpc::StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId);
	}
	comId = std::string((foundComId->second).data(), (foundComId->second).length());

	::grpc::Status returnStatus =
		::grpc::Status(::grpc::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled);

	auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
	{
		if (callStatus.IsOk())
		{
			returnStatus = ::grpc::Status::OK;
		}
		else
		{
			returnStatus = ::grpc::Status(::grpc::StatusCode::ABORTED, callStatus.errorMessage);
		}
	};

	std::vector<::tvchatservice::ReceivedMessage> receivedRepeated(request.received_size());
	for (int index = 0; index < request.received_size(); ++index)
	{
		receivedRepeated[index] = request.received(index);
	}

	std::vector<ReceivedMessage> messages(request.received_size());

	for (int index = 0; index < request.received_size(); ++index)
	{
		const ::tvchatservice::ReceivedMessage& received = request.received(index);

		messages[index].chatId = received.chatid();
		messages[index].messageId = received.messageid();
		messages[index].content = received.content();
		messages[index].timeStamp = received.timestamp();
		messages[index].sender = received.sender();
	}

	m_receivedMessagesProcessing(comId, messages, responseProcessing);

	return returnStatus;
}

::grpc::Status ChatOutServicegRPCServer::MessageSent(::grpc::ServerContext* context,
	const ::tvchatservice::MessageSentRequest* requestPtr,
	::tvchatservice::MessageSentResponse* responsePtr)
{
	if (context == nullptr || requestPtr == nullptr || responsePtr == nullptr)
	{
		return ::grpc::Status(::grpc::StatusCode::INTERNAL, std::string{});
	}

	if (!m_messageSentProcessing)
	{
		return ::grpc::Status(::grpc::StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback);
	}
	auto& request = *requestPtr;
	(void)request;

	auto& response = *responsePtr;
	(void)response;

	std::string comId;

	const auto foundComId = context->client_metadata().find(ServiceBase::CommunicationIdToken);
	if (foundComId == context->client_metadata().end())
	{
		return ::grpc::Status(::grpc::StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId);
	}
	comId = std::string((foundComId->second).data(), (foundComId->second).length());

	::grpc::Status returnStatus =
		::grpc::Status(::grpc::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled);

	auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
	{
		if (callStatus.IsOk())
		{
			returnStatus = ::grpc::Status::OK;
		}
		else
		{
			returnStatus = ::grpc::Status(::grpc::StatusCode::ABORTED, callStatus.errorMessage);
		}
	};

	m_messageSentProcessing(comId,
		request.localid(),

		request.messageid(),

		request.timestamp(),

		responseProcessing);

	return returnStatus;
}

::grpc::Status ChatOutServicegRPCServer::MessageNotSent(::grpc::ServerContext* context,
	const ::tvchatservice::MessageNotSentRequest* requestPtr,
	::tvchatservice::MessageNotSentResponse* responsePtr)
{
	if (context == nullptr || requestPtr == nullptr || responsePtr == nullptr)
	{
		return ::grpc::Status(::grpc::StatusCode::INTERNAL, std::string{});
	}

	if (!m_messageNotSentProcessing)
	{
		return ::grpc::Status(::grpc::StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback);
	}
	auto& request = *requestPtr;
	(void)request;

	auto& response = *responsePtr;
	(void)response;

	std::string comId;

	const auto foundComId = context->client_metadata().find(ServiceBase::CommunicationIdToken);
	if (foundComId == context->client_metadata().end())
	{
		return ::grpc::Status(::grpc::StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId);
	}
	comId = std::string((foundComId->second).data(), (foundComId->second).length());

	::grpc::Status returnStatus =
		::grpc::Status(::grpc::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled);

	auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
	{
		if (callStatus.IsOk())
		{
			returnStatus = ::grpc::Status::OK;
		}
		else
		{
			returnStatus = ::grpc::Status(::grpc::StatusCode::ABORTED, callStatus.errorMessage);
		}
	};

	m_messageNotSentProcessing(comId,
		request.localid(),

		responseProcessing);

	return returnStatus;
}

::grpc::Status ChatOutServicegRPCServer::LoadedMessages(::grpc::ServerContext* context,
	const ::tvchatservice::LoadedMessagesRequest* requestPtr,
	::tvchatservice::LoadedMessagesResponse* responsePtr)
{
	if (context == nullptr || requestPtr == nullptr || responsePtr == nullptr)
	{
		return ::grpc::Status(::grpc::StatusCode::INTERNAL, std::string{});
	}

	if (!m_loadedMessagesProcessing)
	{
		return ::grpc::Status(::grpc::StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback);
	}
	auto& request = *requestPtr;
	(void)request;

	auto& response = *responsePtr;
	(void)response;

	std::string comId;

	const auto foundComId = context->client_metadata().find(ServiceBase::CommunicationIdToken);
	if (foundComId == context->client_metadata().end())
	{
		return ::grpc::Status(::grpc::StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId);
	}
	comId = std::string((foundComId->second).data(), (foundComId->second).length());

	::grpc::Status returnStatus =
		::grpc::Status(::grpc::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled);

	auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
	{
		if (callStatus.IsOk())
		{
			returnStatus = ::grpc::Status::OK;
		}
		else
		{
			returnStatus = ::grpc::Status(::grpc::StatusCode::ABORTED, callStatus.errorMessage);
		}
	};

	std::vector<::tvchatservice::ReceivedMessage> messagesRepeated(request.messages_size());
	for (int index = 0; index < request.messages_size(); ++index)
	{
		messagesRepeated[index] = request.messages(index);
	}

	std::vector<ReceivedMessage> messages(request.messages_size());

	for (int index = 0; index < request.messages_size(); ++index)
	{
		const ::tvchatservice::ReceivedMessage& rMessages = request.messages(index);

		messages[index].chatId = rMessages.chatid();
		messages[index].messageId = rMessages.messageid();
		messages[index].content = rMessages.content();
		messages[index].timeStamp = rMessages.timestamp();
		messages[index].sender = rMessages.sender();
	}

	m_loadedMessagesProcessing(comId, messages, request.hasmore(), responseProcessing);

	return returnStatus;
}

::grpc::Status ChatOutServicegRPCServer::DeletedHistory(::grpc::ServerContext* context,
	const ::tvchatservice::DeletedHistoryRequest* requestPtr,
	::tvchatservice::DeletedHistoryResponse* responsePtr)
{
	if (context == nullptr || requestPtr == nullptr || responsePtr == nullptr)
	{
		return ::grpc::Status(::grpc::StatusCode::INTERNAL, std::string{});
	}

	if (!m_deletedHistoryProcessing)
	{
		return ::grpc::Status(::grpc::StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback);
	}
	auto& request = *requestPtr;
	(void)request;

	auto& response = *responsePtr;
	(void)response;

	std::string comId;

	const auto foundComId = context->client_metadata().find(ServiceBase::CommunicationIdToken);
	if (foundComId == context->client_metadata().end())
	{
		return ::grpc::Status(::grpc::StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId);
	}
	comId = std::string((foundComId->second).data(), (foundComId->second).length());

	::grpc::Status returnStatus =
		::grpc::Status(::grpc::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled);

	auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
	{
		if (callStatus.IsOk())
		{
			returnStatus = ::grpc::Status::OK;
		}
		else
		{
			returnStatus = ::grpc::Status(::grpc::StatusCode::ABORTED, callStatus.errorMessage);
		}
	};

	m_deletedHistoryProcessing(comId,
		request.chatid(),

		responseProcessing);

	return returnStatus;
}

::grpc::Status ChatOutServicegRPCServer::ClosedChat(::grpc::ServerContext* context,
	const ::tvchatservice::ClosedChatRequest* requestPtr,
	::tvchatservice::ClosedChatResponse* responsePtr)
{
	if (context == nullptr || requestPtr == nullptr || responsePtr == nullptr)
	{
		return ::grpc::Status(::grpc::StatusCode::INTERNAL, std::string{});
	}

	if (!m_closedChatProcessing)
	{
		return ::grpc::Status(::grpc::StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback);
	}
	auto& request = *requestPtr;
	(void)request;

	auto& response = *responsePtr;
	(void)response;

	std::string comId;

	const auto foundComId = context->client_metadata().find(ServiceBase::CommunicationIdToken);
	if (foundComId == context->client_metadata().end())
	{
		return ::grpc::Status(::grpc::StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId);
	}
	comId = std::string((foundComId->second).data(), (foundComId->second).length());

	::grpc::Status returnStatus =
		::grpc::Status(::grpc::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled);

	auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
	{
		if (callStatus.IsOk())
		{
			returnStatus = ::grpc::Status::OK;
		}
		else
		{
			returnStatus = ::grpc::Status(::grpc::StatusCode::ABORTED, callStatus.errorMessage);
		}
	};

	m_closedChatProcessing(comId,
		request.chatid(),

		responseProcessing);

	return returnStatus;
}

} // namespace ChatService

} // namespace TVRemoteScreenSDKCommunication