//********************************************************************************//
// MIT License                                                                    //
//                                                                                //
// Copyright (c) 2024 TeamViewer Germany GmbH                                     //
//                                                                                //
// Permission is hereby granted, free of charge, to any person obtaining a copy   //
// of this software and associated documentation files (the "Software"), to deal  //
// in the Software without restriction, including without limitation the rights   //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      //
// copies of the Software, and to permit persons to whom the Software is          //
// furnished to do so, subject to the following conditions:                       //
//                                                                                //
// The above copyright notice and this permission notice shall be included in all //
// copies or substantial portions of the Software.                                //
//                                                                                //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  //
// SOFTWARE.                                                                      //
//********************************************************************************//
// ==================================
// Generated by TVCMGen. DO NOT EDIT!
// ==================================

#include "SessionControlServicegRPCServer.h"

#include <TVRemoteScreenSDKCommunication/ServiceBase/RequestMetadata.h>
#include <TVRemoteScreenSDKCommunication/ServiceBase/ServiceErrorMessage.h>

#include <grpc++/grpc++.h>

namespace TVRemoteScreenSDKCommunication
{

namespace SessionControlService
{

bool SessionControlServicegRPCServer::StartServer(const std::string& location)
{
	m_location = location;

	m_server = TransportFW::CreateAndStartSyncServer(m_location,
		this); // Register this "service" as the instance through which we'll communicate with clients.

	return m_server != nullptr;
}

void SessionControlServicegRPCServer::StopServer(bool /*force*/)
{
	if (m_server)
	{
		m_server->Shutdown();
	}
	m_server.reset();
}

ServiceType SessionControlServicegRPCServer::GetServiceType() const
{
	return ServiceType::SessionControl;
}

const std::string& SessionControlServicegRPCServer::GetLocation() const
{
	return m_location;
}

void SessionControlServicegRPCServer::SetChangeControlModeCallback(const ProcessChangeControlModeRequestCallback& requestProcessing)
{
	m_changeControlModeProcessing = requestProcessing;
}

void SessionControlServicegRPCServer::SetCloseRcCallback(const ProcessCloseRcRequestCallback& requestProcessing)
{
	m_closeRcProcessing = requestProcessing;
}

void SessionControlServicegRPCServer::SetGetRunningTVSessionsCallback(const ProcessGetRunningTVSessionsRequestCallback& requestProcessing)
{
	m_getRunningTVSessionsProcessing = requestProcessing;
}

::grpc::Status SessionControlServicegRPCServer::ChangeControlMode(::grpc::ServerContext* context,
	const ::tvsessioncontrolservice::ChangeControlModeRequest* requestPtr,
	::tvsessioncontrolservice::ChangeControlModeResponse* responsePtr)
{
	if (context == nullptr || requestPtr == nullptr || responsePtr == nullptr)
	{
		return ::grpc::Status(::grpc::StatusCode::INTERNAL, std::string{});
	}

	if (!m_changeControlModeProcessing)
	{
		return ::grpc::Status(::grpc::StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback);
	}
	auto& request = *requestPtr;
	(void)request;

	auto& response = *responsePtr;
	(void)response;

	std::string comId;

	const auto foundComId = context->client_metadata().find(ServiceBase::CommunicationIdToken);
	if (foundComId == context->client_metadata().end())
	{
		return ::grpc::Status(::grpc::StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId);
	}
	comId = std::string((foundComId->second).data(), (foundComId->second).length());

	::grpc::Status returnStatus =
		::grpc::Status(::grpc::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled);

	auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
	{
		if (callStatus.IsOk())
		{
			returnStatus = ::grpc::Status::OK;
		}
		else
		{
			returnStatus = ::grpc::Status(::grpc::StatusCode::ABORTED, callStatus.errorMessage);
		}
	};

	const auto controlMode = request.controlmode();

	ControlMode controlModeEnumValue = ControlMode::Unknown;

	switch (controlMode)
	{
		case ::tvsessioncontrolservice::ChangeControlModeRequest_ControlMode_Unknown:
			controlModeEnumValue = ControlMode::Unknown;
			break;
		case ::tvsessioncontrolservice::ChangeControlModeRequest_ControlMode_FullControl:
			controlModeEnumValue = ControlMode::FullControl;
			break;
		case ::tvsessioncontrolservice::ChangeControlModeRequest_ControlMode_ScreenSharing:
			controlModeEnumValue = ControlMode::ScreenSharing;
			break;
		case ::tvsessioncontrolservice::ChangeControlModeRequest_ControlMode_Disable:
			controlModeEnumValue = ControlMode::Disable;
			break;
		default:

			break;
	}

	m_changeControlModeProcessing(comId,
		controlModeEnumValue,

		responseProcessing);

	return returnStatus;
}

::grpc::Status SessionControlServicegRPCServer::CloseRc(::grpc::ServerContext* context,
	const ::tvsessioncontrolservice::CloseRcRequest* requestPtr,
	::tvsessioncontrolservice::CloseRcResponse* responsePtr)
{
	if (context == nullptr || requestPtr == nullptr || responsePtr == nullptr)
	{
		return ::grpc::Status(::grpc::StatusCode::INTERNAL, std::string{});
	}

	if (!m_closeRcProcessing)
	{
		return ::grpc::Status(::grpc::StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback);
	}
	auto& request = *requestPtr;
	(void)request;

	auto& response = *responsePtr;
	(void)response;

	std::string comId;

	const auto foundComId = context->client_metadata().find(ServiceBase::CommunicationIdToken);
	if (foundComId == context->client_metadata().end())
	{
		return ::grpc::Status(::grpc::StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId);
	}
	comId = std::string((foundComId->second).data(), (foundComId->second).length());

	::grpc::Status returnStatus =
		::grpc::Status(::grpc::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled);

	auto responseProcessing = [&returnStatus](const CallStatus& callStatus)
	{
		if (callStatus.IsOk())
		{
			returnStatus = ::grpc::Status::OK;
		}
		else
		{
			returnStatus = ::grpc::Status(::grpc::StatusCode::ABORTED, callStatus.errorMessage);
		}
	};

	m_closeRcProcessing(comId, responseProcessing);

	return returnStatus;
}

::grpc::Status SessionControlServicegRPCServer::GetRunningTVSessions(::grpc::ServerContext* context,
	const ::tvsessioncontrolservice::RunningSessionsRequest* requestPtr,
	::tvsessioncontrolservice::RunningSessionsResponse* responsePtr)
{
	if (context == nullptr || requestPtr == nullptr || responsePtr == nullptr)
	{
		return ::grpc::Status(::grpc::StatusCode::INTERNAL, std::string{});
	}

	if (!m_getRunningTVSessionsProcessing)
	{
		return ::grpc::Status(::grpc::StatusCode::UNAVAILABLE, TvServiceBase::ErrorMessage_NoProcessingCallback);
	}
	auto& request = *requestPtr;
	(void)request;

	auto& response = *responsePtr;
	(void)response;

	std::string comId;

	const auto foundComId = context->client_metadata().find(ServiceBase::CommunicationIdToken);
	if (foundComId == context->client_metadata().end())
	{
		return ::grpc::Status(::grpc::StatusCode::FAILED_PRECONDITION, TvServiceBase::ErrorMessage_NoComId);
	}
	comId = std::string((foundComId->second).data(), (foundComId->second).length());

	::grpc::Status returnStatus =
		::grpc::Status(::grpc::StatusCode::CANCELLED, TvServiceBase::ErrorMessage_ResponseCallbackNotCalled);

	auto responseProcessing = [&returnStatus, &response](const CallStatus& callStatus, const std::vector<int32_t>& tvSessionIDs)
	{
		if (callStatus.IsOk())
		{
			for (int32_t sessionID : tvSessionIDs)
			{
				auto sessionInfo = response.add_tvsessioninfos();
				sessionInfo->set_sessionid(sessionID);
			}

			returnStatus = TransportFW::Status::OK;
		}
		else
		{
			returnStatus = TransportFW::Status{TransportFW::StatusCode::INTERNAL, callStatus.errorMessage};
		}
	};

	m_getRunningTVSessionsProcessing(comId, responseProcessing);

	return returnStatus;
}

} // namespace SessionControlService

} // namespace TVRemoteScreenSDKCommunication