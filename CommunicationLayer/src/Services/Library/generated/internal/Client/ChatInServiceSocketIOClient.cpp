//********************************************************************************//
// MIT License                                                                    //
//                                                                                //
// Copyright (c) 2024 TeamViewer Germany GmbH                                     //
//                                                                                //
// Permission is hereby granted, free of charge, to any person obtaining a copy   //
// of this software and associated documentation files (the "Software"), to deal  //
// in the Software without restriction, including without limitation the rights   //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      //
// copies of the Software, and to permit persons to whom the Software is          //
// furnished to do so, subject to the following conditions:                       //
//                                                                                //
// The above copyright notice and this permission notice shall be included in all //
// copies or substantial portions of the Software.                                //
//                                                                                //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  //
// SOFTWARE.                                                                      //
//********************************************************************************//
// ==================================
// Generated by TVCMGen. DO NOT EDIT!
// ==================================

#include "ChatInServiceSocketIOClient.h"

#include <TVRemoteScreenSDKCommunication/ServiceBase/ClientErrorMessage.h>
#include <TVRemoteScreenSDKCommunication/ServiceBase/RequestMetadata.h>

#include "internal/ChatInServiceInFunctions.h"

#include "Chat.pb.h"
#include "ChatInMessages.pb.h"

namespace TVRemoteScreenSDKCommunication
{

namespace ChatService
{

void ChatInServiceSocketIOClient::StartClient(const std::string& destination)
{
	m_destination = destination;

	m_channel.reset(new Transport::SocketIO::ChannelInterface(m_destination));
}

void ChatInServiceSocketIOClient::StopClient(bool /*force*/)
{
	m_channel.reset();
}

ServiceType ChatInServiceSocketIOClient::GetServiceType() const
{
	return ServiceType::ChatIn;
}

const std::string& ChatInServiceSocketIOClient::GetDestination() const
{
	return m_destination;
}

// rpc call ObtainChats
auto ChatInServiceSocketIOClient::ObtainChats(const std::string& comId) -> ObtainChatsResponse
{
	ObtainChatsResponse returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::ObtainChatsRequest request{};

	::tvchatservice::ObtainChatsResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_ObtainChats, request, response);

	if (status.ok())
	{
		returnValue.state = CallState::Ok;

		std::vector<ChatInfo> chats(response.chatinfo_size());

		for (int index = 0; index < response.chatinfo_size(); ++index)
		{
			const ::tvchatservice::ChatInfo& info = response.chatinfo(index);

			chats[index].chatId = info.chatid();
			chats[index].title = info.title();
			chats[index].chatTypeId = info.chattypeid();

			const auto chatType = info.chattype();
			const auto chatState = info.chatstate();

			ChatType chatTypeEnumValue = ChatType::Machine;
			bool chatTypeConverted = true;
			switch (chatType)
			{
				case ::tvchatservice::ChatType::Machine:
					chatTypeEnumValue = ChatType::Machine;
					break;
				case ::tvchatservice::ChatType::Session:
					chatTypeEnumValue = ChatType::Session;
					break;
				default:
					chatTypeConverted = false;
					break;
			}

			ChatState chatStateEnumValue = ChatState::Open;
			bool chatStateConverted = true;
			switch (chatState)
			{
				case ::tvchatservice::ChatState::Open:
					chatStateEnumValue = ChatState::Open;
					break;
				case ::tvchatservice::ChatState::Closed:
					chatStateEnumValue = ChatState::Closed;
					break;
				default:
					chatStateConverted = false;
					break;
			}

			if (!chatTypeConverted || !chatStateConverted)
			{
				returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidResponseValue;
				return returnValue;
			}
			chats[index].chatType = chatTypeEnumValue;
			chats[index].chatState = chatStateEnumValue;
		}

		returnValue.chats.swap(chats);
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}
	return returnValue;
}

// rpc call SelectChat
auto ChatInServiceSocketIOClient::SelectChat(const std::string& comId, const std::string& chatId) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::SelectChatRequest request{};

	request.set_chatid(chatId);

	::tvchatservice::SelectChatResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_SelectChat, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call SendMessage
auto ChatInServiceSocketIOClient::SendMessage(const std::string& comId, uint32_t localId, const std::string& content) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::SendMessageRequest request{};

	request.set_localid(localId);

	request.set_content(content);

	::tvchatservice::SendMessageResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_SendMessage, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call LoadMessages
auto ChatInServiceSocketIOClient::LoadMessages(const std::string& comId, uint32_t count, const std::string& lastId) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}
	if (count == 0)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::LoadMessagesRequest request{};

	request.set_count(count);

	request.set_lastid(lastId);

	::tvchatservice::LoadMessagesResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_LoadMessages, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call DeleteHistory
auto ChatInServiceSocketIOClient::DeleteHistory(const std::string& comId) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::DeleteHistoryRequest request{};

	::tvchatservice::DeleteHistoryResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_DeleteHistory, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call DeleteChat
auto ChatInServiceSocketIOClient::DeleteChat(const std::string& comId) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::DeleteChatRequest request{};

	::tvchatservice::DeleteChatResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_DeleteChat, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

} // namespace ChatService

} // namespace TVRemoteScreenSDKCommunication