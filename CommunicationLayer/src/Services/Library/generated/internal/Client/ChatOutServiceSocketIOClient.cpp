//********************************************************************************//
// MIT License                                                                    //
//                                                                                //
// Copyright (c) 2024 TeamViewer Germany GmbH                                     //
//                                                                                //
// Permission is hereby granted, free of charge, to any person obtaining a copy   //
// of this software and associated documentation files (the "Software"), to deal  //
// in the Software without restriction, including without limitation the rights   //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      //
// copies of the Software, and to permit persons to whom the Software is          //
// furnished to do so, subject to the following conditions:                       //
//                                                                                //
// The above copyright notice and this permission notice shall be included in all //
// copies or substantial portions of the Software.                                //
//                                                                                //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  //
// SOFTWARE.                                                                      //
//********************************************************************************//
// ==================================
// Generated by TVCMGen. DO NOT EDIT!
// ==================================

#include "ChatOutServiceSocketIOClient.h"

#include <TVRemoteScreenSDKCommunication/ServiceBase/ClientErrorMessage.h>
#include <TVRemoteScreenSDKCommunication/ServiceBase/RequestMetadata.h>

#include "internal/ChatOutServiceOutFunctions.h"

#include "Chat.pb.h"
#include "ChatOutMessages.pb.h"

namespace TVRemoteScreenSDKCommunication
{

namespace ChatService
{

void ChatOutServiceSocketIOClient::StartClient(const std::string& destination)
{
	m_destination = destination;

	m_channel.reset(new Transport::SocketIO::ChannelInterface(m_destination));
}

void ChatOutServiceSocketIOClient::StopClient(bool /*force*/)
{
	m_channel.reset();
}

ServiceType ChatOutServiceSocketIOClient::GetServiceType() const
{
	return ServiceType::ChatOut;
}

const std::string& ChatOutServiceSocketIOClient::GetDestination() const
{
	return m_destination;
}

// rpc call ChatCreated
auto ChatOutServiceSocketIOClient::ChatCreated(const std::string& comId,
	const std::string& chatId,
	const std::string& title,
	ChatType chatType,
	uint32_t chatTypeId) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}
	if (chatId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::ChatCreatedRequest request{};

	request.set_chatid(chatId);

	request.set_title(title);

	::tvchatservice::ChatType chatTypeProtoValue = ::tvchatservice::ChatType::Machine;
	bool chatTypeConverted = true;
	switch (chatType)
	{
		case ChatType::Machine:
			chatTypeProtoValue = ::tvchatservice::ChatType::Machine;
			break;
		case ChatType::Session:
			chatTypeProtoValue = ::tvchatservice::ChatType::Session;
			break;
		default:
			chatTypeConverted = false;
			break;
	}

	if (!chatTypeConverted)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	request.set_chattype(chatTypeProtoValue);

	request.set_chattypeid(chatTypeId);

	::tvchatservice::ChatCreatedResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_ChatCreated, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call ChatsRemoved
auto ChatOutServiceSocketIOClient::ChatsRemoved(const std::string& comId, const std::vector<std::string>& chatId) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}
	if (!std::all_of(chatId.begin(),
			chatId.end(),
			[](const std::string& id)
			{
				return !id.empty();
			}))
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::ChatsRemovedRequest request{};

	for (const auto& chatIdItem : chatId)
	{
		request.add_chatid(chatIdItem);
	}

	::tvchatservice::ChatsRemovedResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_ChatsRemoved, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call ReceivedMessages
auto ChatOutServiceSocketIOClient::ReceivedMessages(const std::string& comId, const std::vector<ReceivedMessage>& received) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}
	if (!std::all_of(received.begin(),
			received.end(),
			[](const ReceivedMessage& message)
			{
				return !message.messageId.empty() && !message.content.empty() && message.timeStamp != 0;
			}))
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::ReceivedMessagesRequest request{};

	for (const auto& message : received)
	{
		::tvchatservice::ReceivedMessage* receivedMessage = request.add_received();
		receivedMessage->set_chatid(message.chatId);
		receivedMessage->set_messageid(message.messageId);
		receivedMessage->set_content(message.content);
		receivedMessage->set_timestamp(message.timeStamp);
		receivedMessage->set_sender(message.sender);
	}

	::tvchatservice::ReceivedMessagesResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_ReceivedMessages, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call MessageSent
auto ChatOutServiceSocketIOClient::MessageSent(const std::string& comId, uint32_t localId, const std::string& messageId, uint64_t timeStamp)
	-> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::MessageSentRequest request{};

	request.set_localid(localId);

	request.set_messageid(messageId);

	request.set_timestamp(timeStamp);

	::tvchatservice::MessageSentResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_MessageSent, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call MessageNotSent
auto ChatOutServiceSocketIOClient::MessageNotSent(const std::string& comId, uint32_t localId) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::MessageNotSentRequest request{};

	request.set_localid(localId);

	::tvchatservice::MessageNotSentResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_MessageNotSent, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call LoadedMessages
auto ChatOutServiceSocketIOClient::LoadedMessages(const std::string& comId,
	const std::vector<ReceivedMessage>& messages,
	bool hasMore) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}
	if (!std::all_of(messages.begin(),
			messages.end(),
			[](const ReceivedMessage& message)
			{
				return !message.messageId.empty() && !message.content.empty() && message.timeStamp != 0;
			}))
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::LoadedMessagesRequest request{};

	for (const auto& message : messages)
	{
		::tvchatservice::ReceivedMessage* rMessage = request.add_messages();
		rMessage->set_chatid(message.chatId);
		rMessage->set_messageid(message.messageId);
		rMessage->set_content(message.content);
		rMessage->set_timestamp(message.timeStamp);
		rMessage->set_sender(message.sender);
	}
	request.set_hasmore(hasMore);

	::tvchatservice::LoadedMessagesResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_LoadedMessages, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call DeletedHistory
auto ChatOutServiceSocketIOClient::DeletedHistory(const std::string& comId, const std::string& chatId) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::DeletedHistoryRequest request{};

	request.set_chatid(chatId);

	::tvchatservice::DeletedHistoryResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_DeletedHistory, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call ClosedChat
auto ChatOutServiceSocketIOClient::ClosedChat(const std::string& comId, const std::string& chatId) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::tvchatservice::ClosedChatRequest request{};

	request.set_chatid(chatId);

	::tvchatservice::ClosedChatResponse response{};

	Transport::SocketIO::Status status = m_channel->Call(comId, Function_ClosedChat, request, response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

} // namespace ChatService

} // namespace TVRemoteScreenSDKCommunication