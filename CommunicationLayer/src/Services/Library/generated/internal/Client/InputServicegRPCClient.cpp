//********************************************************************************//
// MIT License                                                                    //
//                                                                                //
// Copyright (c) 2024 TeamViewer Germany GmbH                                     //
//                                                                                //
// Permission is hereby granted, free of charge, to any person obtaining a copy   //
// of this software and associated documentation files (the "Software"), to deal  //
// in the Software without restriction, including without limitation the rights   //
// to use, copy, modify, merge, publish, distribute, sublicense, and/or sell      //
// copies of the Software, and to permit persons to whom the Software is          //
// furnished to do so, subject to the following conditions:                       //
//                                                                                //
// The above copyright notice and this permission notice shall be included in all //
// copies or substantial portions of the Software.                                //
//                                                                                //
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR     //
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,       //
// FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE    //
// AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER         //
// LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,  //
// OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE  //
// SOFTWARE.                                                                      //
//********************************************************************************//
// ==================================
// Generated by TVCMGen. DO NOT EDIT!
// ==================================

#include "InputServicegRPCClient.h"

#include <TVRemoteScreenSDKCommunication/ServiceBase/ClientErrorMessage.h>
#include <TVRemoteScreenSDKCommunication/ServiceBase/RequestMetadata.h>

#include <grpc++/create_channel.h>

namespace TVRemoteScreenSDKCommunication
{

namespace InputService
{

void InputServicegRPCClient::StartClient(const std::string& destination)
{
	m_destination = destination;

	m_channel = ::grpc::CreateChannel(m_destination, ::grpc::InsecureChannelCredentials());
	m_stub = ::tvinputservice::InputService::NewStub(m_channel);
}

void InputServicegRPCClient::StopClient(bool /*force*/)
{
	m_stub.reset();
	m_channel.reset();
}

ServiceType InputServicegRPCClient::GetServiceType() const
{
	return ServiceType::Input;
}

const std::string& InputServicegRPCClient::GetDestination() const
{
	return m_destination;
}

// rpc call SimulateKey
auto InputServicegRPCClient::SimulateKey(const std::string& comId, KeyState keystate, uint32_t xkbSymbol, uint32_t unicodeCharacter, uint32_t xkbModifiers)
	-> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr || m_stub == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::grpc::ClientContext context{};

	context.AddMetadata(ServiceBase::CommunicationIdToken, comId);

	::tvinputservice::KeyRequest request{};

	::tvinputservice::KeyRequest_KeyState keystateProtoValue = ::tvinputservice::KeyRequest_KeyState_Up;

	switch (keystate)
	{
		case KeyState::Unknown:
			keystateProtoValue = ::tvinputservice::KeyRequest_KeyState_Unknown;
			break;
		case KeyState::Down:
			keystateProtoValue = ::tvinputservice::KeyRequest_KeyState_Down;
			break;
		case KeyState::Up:
			keystateProtoValue = ::tvinputservice::KeyRequest_KeyState_Up;
			break;
		default:

			break;
	}

	request.set_keystate(keystateProtoValue);

	request.set_xkbsymbol(xkbSymbol);

	request.set_unicodecharacter(unicodeCharacter);

	request.set_xkbmodifiers(xkbModifiers);

	::tvinputservice::KeyResponse response{};

	::grpc::Status status = m_stub->SimulateKey(&context, request, &response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call SimulateMouseMove
auto InputServicegRPCClient::SimulateMouseMove(const std::string& comId, int32_t posX, int32_t posY) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr || m_stub == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::grpc::ClientContext context{};

	context.AddMetadata(ServiceBase::CommunicationIdToken, comId);

	::tvinputservice::MouseMoveRequest request{};

	request.set_posx(posX);

	request.set_posy(posY);

	::tvinputservice::MouseMoveResponse response{};

	::grpc::Status status = m_stub->SimulateMouseMove(&context, request, &response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call SimulateMousePressRelease
auto InputServicegRPCClient::SimulateMousePressRelease(const std::string& comId,
	MouseButtonState mouseButtonState,
	int32_t posX,
	int32_t posY,
	MouseButton button) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr || m_stub == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::grpc::ClientContext context{};

	context.AddMetadata(ServiceBase::CommunicationIdToken, comId);

	::tvinputservice::MousePressReleaseRequest request{};

	::tvinputservice::MousePressReleaseRequest_MouseButtonState mouseButtonStateProtoValue =
		::tvinputservice::MousePressReleaseRequest_MouseButtonState_Released;

	switch (mouseButtonState)
	{
		case MouseButtonState::Unknown:
			mouseButtonStateProtoValue = ::tvinputservice::MousePressReleaseRequest_MouseButtonState_Unknown;
			break;
		case MouseButtonState::Pressed:
			mouseButtonStateProtoValue = ::tvinputservice::MousePressReleaseRequest_MouseButtonState_Pressed;
			break;
		case MouseButtonState::Released:
			mouseButtonStateProtoValue = ::tvinputservice::MousePressReleaseRequest_MouseButtonState_Released;
			break;
		default:

			break;
	}

	request.set_mousebuttonstate(mouseButtonStateProtoValue);

	request.set_posx(posX);

	request.set_posy(posY);

	::tvinputservice::MouseButton buttonProtoValue = ::tvinputservice::MouseButton::Unknown;

	switch (button)
	{
		case MouseButton::Unknown:
			buttonProtoValue = ::tvinputservice::MouseButton::Unknown;
			break;
		case MouseButton::Left:
			buttonProtoValue = ::tvinputservice::MouseButton::Left;
			break;
		case MouseButton::Middle:
			buttonProtoValue = ::tvinputservice::MouseButton::Middle;
			break;
		case MouseButton::Right:
			buttonProtoValue = ::tvinputservice::MouseButton::Right;
			break;
		default:

			break;
	}

	if (buttonProtoValue == ::tvinputservice::MouseButton::Unknown)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	request.set_button(buttonProtoValue);

	::tvinputservice::MousePressReleaseResponse response{};

	::grpc::Status status = m_stub->SimulateMousePressRelease(&context, request, &response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

// rpc call SimulateMouseWheel
auto InputServicegRPCClient::SimulateMouseWheel(const std::string& comId, int32_t posX, int32_t posY, int32_t angle) -> CallStatus
{
	CallStatus returnValue{};

	if (m_channel == nullptr || m_stub == nullptr)
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_MissingStartClient;
		return returnValue;
	}

	if (comId.empty())
	{
		returnValue.errorMessage = TvServiceBase::ErrorMessage_InvalidInputParameter;
		return returnValue;
	}

	::grpc::ClientContext context{};

	context.AddMetadata(ServiceBase::CommunicationIdToken, comId);

	::tvinputservice::MouseWheelRequest request{};

	request.set_posx(posX);

	request.set_posy(posY);

	request.set_angle(angle);

	::tvinputservice::MouseWheelResponse response{};

	::grpc::Status status = m_stub->SimulateMouseWheel(&context, request, &response);

	if (status.ok())
	{
		returnValue = CallStatus{CallState::Ok};
	}
	else
	{
		returnValue.errorMessage = status.error_message();
	}

	return returnValue;
}

} // namespace InputService

} // namespace TVRemoteScreenSDKCommunication